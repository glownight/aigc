/**
 * useEngine Hook - ÁÆ°ÁêÜ WebLLM ÂºïÊìé
 */

import { useEffect, useRef, useState } from "react";
import { loadWebLLMModule, getEngineSingleton } from "../utils/webllm";
import type { EngineMode } from "../types";

export function useEngine(
    engine: EngineMode,
    browserModel: string,
    downloadPaused: boolean
) {
    const [engineReady, setEngineReady] = useState(false);
    const [progressText, setProgressText] = useState("");
    const [initError, setInitError] = useState<string | null>(null);
    const [retryCount, setRetryCount] = useState(0);
    const engineRef = useRef<any | null>(null);

    useEffect(() => {
        if (engine !== "browser") {
            engineRef.current = null;
            setEngineReady(false);
            setProgressText("");
            setInitError(null);
            return;
        }

        // Â¶ÇÊûú‰∏ãËΩΩË¢´ÊöÇÂÅúÔºå‰∏çÂêØÂä®ÂàùÂßãÂåñ
        if (downloadPaused) {
            return;
        }

        let cancelled = false;
        setEngineReady(false);
        setInitError(null); // Ê∏ÖÈô§‰πãÂâçÁöÑÈîôËØØ
        setProgressText(
            "È¶ñÊ¨°‰∏ãËΩΩ‰ºöË¶ÅÁ∫¶234MBÊï∞ÊçÆÔºåËØ∑ËÄêÂøÉÁ≠âÂæÖ„ÄÇÂêéÁª≠‰ΩøÁî®Â∞Ü‰ºöÈùûÂ∏∏Âø´ÈÄüÔºÅ"
        );

        (async () => {
            try {
                // üîç Ê£ÄÊü•ÊµèËßàÂô®ÂÖºÂÆπÊÄß
                if (!navigator.gpu) {
                    const errorMsg = "ÊµèËßàÂô®‰∏çÊîØÊåÅ WebGPUÔºåÊó†Ê≥ïËøêË°åÊú¨Âú∞Ê®°Âûã„ÄÇËØ∑‰ΩøÁî® Chrome/Edge 119+ ÁâàÊú¨ÔºåÊàñÂàáÊç¢Âà∞ËøúÁ®ã API Ê®°Âºè„ÄÇ";
                    setProgressText(`ÂàùÂßãÂåñÂ§±Ë¥•Ôºö${errorMsg}`);
                    setInitError(errorMsg);
                    return;
                }

                const singleton = getEngineSingleton();

                // Ëã•Â∑≤ÊúâÂçï‰æã‰∏îÊ®°Âûã‰∏ÄËá¥ÔºåÁõ¥Êé•Â§çÁî®
                if (singleton.engine && singleton.model === browserModel) {
                    engineRef.current = singleton.engine;
                    setEngineReady(true);
                    setProgressText("Ê®°ÂûãÂ∑≤Â∞±Áª™ÔºàÂ§çÁî®ÁºìÂ≠òÂÆû‰æãÔºâ");
                    return;
                }

                // Â¶ÇÊûúÊ≠£Âú®ÂàõÂª∫ÔºåÁ≠âÂæÖÂêå‰∏Ä‰∏™ Promise
                if (singleton.creating) {
                    setProgressText("Ê®°ÂûãÊ≠£Âú®ÂáÜÂ§áÔºàÂÖ±‰∫´ÂàõÂª∫ËøáÁ®ãÔºâ‚Ä¶");
                    const eng = await singleton.creating;
                    if (!cancelled) {
                        engineRef.current = eng;
                        setEngineReady(true);
                        setProgressText("Ê®°ÂûãÂ∑≤Â∞±Áª™„ÄÇ");
                    }
                    return;
                }

                // Âä†ËΩΩ WebLLM Ê®°Âùó
                setProgressText("Ê≠£Âú®Âä†ËΩΩ AI Ê®°Âùó...");
                const mod = await loadWebLLMModule();
                const { CreateMLCEngine } = mod as any;

                // ÊûÑÂª∫ÂºïÊìéÈÖçÁΩÆ
                const engineConfig: any = {
                    initProgressCallback: (report: any) => {
                        if (cancelled) return;

                        let displayText = report?.text || JSON.stringify(report);

                        // ‰ºòÂåñËøõÂ∫¶ÊòæÁ§∫
                        if (displayText.includes("Fetching param cached")) {
                            const match = displayText.match(/(\d+)MB.*?(\d+)%.*?(\d+) sec/);
                            if (match) {
                                const [, mb, percent, seconds] = match;
                                displayText = `È¶ñÊ¨°‰∏ãËΩΩÊ®°ÂûãÊï∞ÊçÆ: ${mb}MB (${percent}%) - Â∑≤Áî®Êó∂${seconds}Áßí`;

                                if (parseInt(percent) > 50) {
                                    displayText += " - Âç≥Â∞ÜÂÆåÊàêÔºÅ";
                                } else if (parseInt(percent) > 20) {
                                    displayText += " - ËøõÂ±ïÈ°∫Âà©";
                                }
                            }
                        } else if (displayText.includes("Loading model")) {
                            displayText = "Ê≠£Âú®Âä†ËΩΩÊ®°ÂûãÊñá‰ª∂...";
                        } else if (displayText.includes("Compiling")) {
                            displayText = "Ê≠£Âú®ÁºñËØëÊ®°ÂûãÔºåÈ©¨‰∏äÂ∞±Â•Ω...";
                        }

                        setProgressText(displayText);
                    },
                };

                const creating = CreateMLCEngine(browserModel, engineConfig);
                singleton.creating = creating;
                const eng = await creating;

                if (!cancelled) {
                    singleton.engine = eng;
                    singleton.model = browserModel;
                    singleton.creating = null;
                    engineRef.current = eng;
                    setEngineReady(true);
                    setProgressText("Ê®°ÂûãÂ∑≤Â∞±Áª™ÔºåÂèØ‰ª•ÂºÄÂßãÂØπËØù„ÄÇ");
                }
            } catch (e: any) {
                const singleton = getEngineSingleton();
                singleton.creating = null;
                if (!cancelled) {
                    let errorMsg = e?.message || String(e);

                    // üîç Êèê‰æõÊõ¥ÂèãÂ•ΩÁöÑÈîôËØØÊèêÁ§∫
                    if (errorMsg.includes("Failed to fetch")) {
                        errorMsg = "ÁΩëÁªúËøûÊé•Â§±Ë¥•ÔºåÊó†Ê≥ï‰∏ãËΩΩÊ®°ÂûãÊñá‰ª∂„ÄÇ\n\nÂèØËÉΩÂéüÂõ†Ôºö\n1. WebLLM ÁöÑ CDN Âú®ÂõΩÂÜÖËÆøÈóÆÂèóÈôê\n2. ÁΩëÁªúËøûÊé•‰∏çÁ®≥ÂÆö\n3. Èò≤ÁÅ´Â¢ôÈòªÊ≠¢‰∫Ü‰∏ãËΩΩ\n\nÂª∫ËÆÆÔºöÂàáÊç¢Âà∞ËøúÁ®ã API Ê®°Âºè";
                    } else if (errorMsg.includes("WebGPU")) {
                        errorMsg = `WebGPU ÈîôËØØÔºö${errorMsg}\n\nËØ∑Á°Æ‰øù‰ΩøÁî® Chrome/Edge 119+ ÁâàÊú¨`;
                    } else if (errorMsg.includes("quota")) {
                        errorMsg = "ÊµèËßàÂô®Â≠òÂÇ®Á©∫Èó¥‰∏çË∂≥ÔºåËØ∑Ê∏ÖÁêÜÁºìÂ≠òÂêéÈáçËØï";
                    }

                    console.error("[useEngine] ÂàùÂßãÂåñÈîôËØØ:", e);
                    setProgressText(`ÂàùÂßãÂåñÂ§±Ë¥•Ôºö${errorMsg}`);
                    setInitError(errorMsg); // ËÆæÁΩÆÈîôËØØÁä∂ÊÄÅ
                }
            }
        })();

        return () => {
            cancelled = true;
        };
    }, [engine, browserModel, downloadPaused, retryCount]); // Ê∑ªÂä†retryCount‰æùËµñ

    // ÈáçËØïÂáΩÊï∞
    const retry = () => {
        setRetryCount((prev) => prev + 1);
    };

    return {
        engineRef,
        engineReady,
        progressText,
        setProgressText,
        initError,
        retry,
    };
}

